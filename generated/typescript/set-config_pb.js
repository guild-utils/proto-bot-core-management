/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var config_pb = require('./config_pb.js');
goog.exportSymbol('proto.AddSimpleDictionary', null, global);
goog.exportSymbol('proto.InsertSimpleDictionary', null, global);
goog.exportSymbol('proto.MoveSimpleDictionary', null, global);
goog.exportSymbol('proto.MoveSimpleDictionaryResult', null, global);
goog.exportSymbol('proto.MoveSimpleDictionaryResultOk', null, global);
goog.exportSymbol('proto.RemoveFromMainDictionary', null, global);
goog.exportSymbol('proto.RemoveSimpleDictionary', null, global);
goog.exportSymbol('proto.SimpleDictionaryUpdateTarget', null, global);
goog.exportSymbol('proto.SimpleDictionaryUpdateTargetGuild', null, global);
goog.exportSymbol('proto.SimpleDictionaryUpdateTargetSharedDictionary', null, global);
goog.exportSymbol('proto.Target', null, global);
goog.exportSymbol('proto.UpdateFloat', null, global);
goog.exportSymbol('proto.UpdateOrInsertMainDictionary', null, global);
goog.exportSymbol('proto.UpdateReadName', null, global);
goog.exportSymbol('proto.UpdateReadNameOk', null, global);
goog.exportSymbol('proto.UpdateResultDictionaryEntryA', null, global);
goog.exportSymbol('proto.UpdateResultDictionaryEntryAOk', null, global);
goog.exportSymbol('proto.UpdateResultDictionaryEntryASame', null, global);
goog.exportSymbol('proto.UpdateResultDictionaryEntryB', null, global);
goog.exportSymbol('proto.UpdateResultDictionaryEntryBOk', null, global);
goog.exportSymbol('proto.UpdateResultDictionaryEntryBSame', null, global);
goog.exportSymbol('proto.UpdateResultError', null, global);
goog.exportSymbol('proto.UpdateResultFloat', null, global);
goog.exportSymbol('proto.UpdateResultFloatOk', null, global);
goog.exportSymbol('proto.UpdateResultFloatSame', null, global);
goog.exportSymbol('proto.UpdateResultReadName', null, global);
goog.exportSymbol('proto.UpdateResultReadNameSame', null, global);
goog.exportSymbol('proto.UpdateResultString', null, global);
goog.exportSymbol('proto.UpdateResultStringOk', null, global);
goog.exportSymbol('proto.UpdateResultStringSame', null, global);
goog.exportSymbol('proto.UpdateResultUint32', null, global);
goog.exportSymbol('proto.UpdateResultUint32Ok', null, global);
goog.exportSymbol('proto.UpdateResultUint32Same', null, global);
goog.exportSymbol('proto.UpdateSimpleDictionary', null, global);
goog.exportSymbol('proto.UpdateString', null, global);
goog.exportSymbol('proto.UpdateUint32', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Target.displayName = 'proto.Target';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Target} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    guild: msg.getGuild(),
    user: msg.getUser()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Target}
 */
proto.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Target;
  return proto.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Target}
 */
proto.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuild(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Target} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Target.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Target.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuild();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUser();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Target} The clone.
 */
proto.Target.prototype.cloneMessage = function() {
  return /** @type {!proto.Target} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string guild = 1;
 * @return {string}
 */
proto.Target.prototype.getGuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Target.prototype.setGuild = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user = 2;
 * @return {string}
 */
proto.Target.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Target.prototype.setUser = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateResultError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultError.displayName = 'proto.UpdateResultError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultError.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultError} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultError.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: msg.getMessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultError}
 */
proto.UpdateResultError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultError;
  return proto.UpdateResultError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultError}
 */
proto.UpdateResultError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultError} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultError.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultError.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultError} The clone.
 */
proto.UpdateResultError.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultError} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.UpdateResultError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.UpdateResultError.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateString.oneofGroups_);
};
goog.inherits(proto.UpdateString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateString.displayName = 'proto.UpdateString';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateString.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.UpdateString.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 2
};

/**
 * @return {proto.UpdateString.ValueOptionalCase}
 */
proto.UpdateString.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateString.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateString.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateString.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateString} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateString.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.Target.toObject(includeInstance, f),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateString}
 */
proto.UpdateString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateString;
  return proto.UpdateString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateString}
 */
proto.UpdateString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Target;
      reader.readMessage(value,proto.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateString} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateString.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateString.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Target.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateString} The clone.
 */
proto.UpdateString.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateString} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Target target = 1;
 * @return {proto.Target}
 */
proto.UpdateString.prototype.getTarget = function() {
  return /** @type{proto.Target} */ (
    jspb.Message.getWrapperField(this, proto.Target, 1));
};


/** @param {proto.Target|undefined} value  */
proto.UpdateString.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateString.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateString.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.UpdateString.prototype.getValue = function() {
  return /** @type {string} */ (!this.hasValue() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.UpdateString.prototype.setValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateString.oneofGroups_[0], value);
};


proto.UpdateString.prototype.clearValue = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateString.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateString.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultStringOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultStringOk.oneofGroups_);
};
goog.inherits(proto.UpdateResultStringOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultStringOk.displayName = 'proto.UpdateResultStringOk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultStringOk.oneofGroups_ = [[1],[2]];

/**
 * @enum {number}
 */
proto.UpdateResultStringOk.BeforeOptionalCase = {
  BEFORE_OPTIONAL_NOT_SET: 0,
  BEFORE: 1
};

/**
 * @return {proto.UpdateResultStringOk.BeforeOptionalCase}
 */
proto.UpdateResultStringOk.prototype.getBeforeOptionalCase = function() {
  return /** @type {proto.UpdateResultStringOk.BeforeOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultStringOk.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.UpdateResultStringOk.AfterOptionalCase = {
  AFTER_OPTIONAL_NOT_SET: 0,
  AFTER: 2
};

/**
 * @return {proto.UpdateResultStringOk.AfterOptionalCase}
 */
proto.UpdateResultStringOk.prototype.getAfterOptionalCase = function() {
  return /** @type {proto.UpdateResultStringOk.AfterOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultStringOk.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultStringOk.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultStringOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultStringOk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultStringOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: jspb.Message.getField(msg, 1),
    after: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultStringOk}
 */
proto.UpdateResultStringOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultStringOk;
  return proto.UpdateResultStringOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultStringOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultStringOk}
 */
proto.UpdateResultStringOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBefore(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultStringOk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultStringOk.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultStringOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultStringOk.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultStringOk} The clone.
 */
proto.UpdateResultStringOk.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultStringOk} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string before = 1;
 * @return {string}
 */
proto.UpdateResultStringOk.prototype.getBefore = function() {
  return /** @type {string} */ (!this.hasBefore() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string?|undefined} value  */
proto.UpdateResultStringOk.prototype.setBefore = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultStringOk.oneofGroups_[0], value);
};


proto.UpdateResultStringOk.prototype.clearBefore = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultStringOk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultStringOk.prototype.hasBefore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string after = 2;
 * @return {string}
 */
proto.UpdateResultStringOk.prototype.getAfter = function() {
  return /** @type {string} */ (!this.hasAfter() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.UpdateResultStringOk.prototype.setAfter = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultStringOk.oneofGroups_[1], value);
};


proto.UpdateResultStringOk.prototype.clearAfter = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultStringOk.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultStringOk.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultStringSame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultStringSame.oneofGroups_);
};
goog.inherits(proto.UpdateResultStringSame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultStringSame.displayName = 'proto.UpdateResultStringSame';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultStringSame.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.UpdateResultStringSame.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 1
};

/**
 * @return {proto.UpdateResultStringSame.ValueOptionalCase}
 */
proto.UpdateResultStringSame.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateResultStringSame.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultStringSame.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultStringSame.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultStringSame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultStringSame} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultStringSame.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultStringSame}
 */
proto.UpdateResultStringSame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultStringSame;
  return proto.UpdateResultStringSame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultStringSame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultStringSame}
 */
proto.UpdateResultStringSame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultStringSame} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultStringSame.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultStringSame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultStringSame.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultStringSame} The clone.
 */
proto.UpdateResultStringSame.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultStringSame} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.UpdateResultStringSame.prototype.getValue = function() {
  return /** @type {string} */ (!this.hasValue() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string?|undefined} value  */
proto.UpdateResultStringSame.prototype.setValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultStringSame.oneofGroups_[0], value);
};


proto.UpdateResultStringSame.prototype.clearValue = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultStringSame.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultStringSame.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultString.oneofGroups_);
};
goog.inherits(proto.UpdateResultString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultString.displayName = 'proto.UpdateResultString';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultString.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.UpdateResultString.UpdateresultCase = {
  UPDATERESULT_NOT_SET: 0,
  RESULTOK: 1,
  RESULTSAME: 2,
  ERROR: 3
};

/**
 * @return {proto.UpdateResultString.UpdateresultCase}
 */
proto.UpdateResultString.prototype.getUpdateresultCase = function() {
  return /** @type {proto.UpdateResultString.UpdateresultCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultString.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultString.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultString} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultString.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultok: (f = msg.getResultok()) && proto.UpdateResultStringOk.toObject(includeInstance, f),
    resultsame: (f = msg.getResultsame()) && proto.UpdateResultStringSame.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.UpdateResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultString}
 */
proto.UpdateResultString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultString;
  return proto.UpdateResultString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultString}
 */
proto.UpdateResultString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UpdateResultStringOk;
      reader.readMessage(value,proto.UpdateResultStringOk.deserializeBinaryFromReader);
      msg.setResultok(value);
      break;
    case 2:
      var value = new proto.UpdateResultStringSame;
      reader.readMessage(value,proto.UpdateResultStringSame.deserializeBinaryFromReader);
      msg.setResultsame(value);
      break;
    case 3:
      var value = new proto.UpdateResultError;
      reader.readMessage(value,proto.UpdateResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultString} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultString.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultString.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UpdateResultStringOk.serializeBinaryToWriter
    );
  }
  f = this.getResultsame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateResultStringSame.serializeBinaryToWriter
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UpdateResultError.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultString} The clone.
 */
proto.UpdateResultString.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultString} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UpdateResultStringOk resultOk = 1;
 * @return {proto.UpdateResultStringOk}
 */
proto.UpdateResultString.prototype.getResultok = function() {
  return /** @type{proto.UpdateResultStringOk} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultStringOk, 1));
};


/** @param {proto.UpdateResultStringOk|undefined} value  */
proto.UpdateResultString.prototype.setResultok = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultString.oneofGroups_[0], value);
};


proto.UpdateResultString.prototype.clearResultok = function() {
  this.setResultok(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultString.prototype.hasResultok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateResultStringSame resultSame = 2;
 * @return {proto.UpdateResultStringSame}
 */
proto.UpdateResultString.prototype.getResultsame = function() {
  return /** @type{proto.UpdateResultStringSame} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultStringSame, 2));
};


/** @param {proto.UpdateResultStringSame|undefined} value  */
proto.UpdateResultString.prototype.setResultsame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultString.oneofGroups_[0], value);
};


proto.UpdateResultString.prototype.clearResultsame = function() {
  this.setResultsame(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultString.prototype.hasResultsame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateResultError error = 3;
 * @return {proto.UpdateResultError}
 */
proto.UpdateResultString.prototype.getError = function() {
  return /** @type{proto.UpdateResultError} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultError, 3));
};


/** @param {proto.UpdateResultError|undefined} value  */
proto.UpdateResultString.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.UpdateResultString.oneofGroups_[0], value);
};


proto.UpdateResultString.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultString.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateFloat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateFloat.oneofGroups_);
};
goog.inherits(proto.UpdateFloat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateFloat.displayName = 'proto.UpdateFloat';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateFloat.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.UpdateFloat.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 2
};

/**
 * @return {proto.UpdateFloat.ValueOptionalCase}
 */
proto.UpdateFloat.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateFloat.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateFloat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateFloat.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateFloat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateFloat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateFloat.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.Target.toObject(includeInstance, f),
    value: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateFloat}
 */
proto.UpdateFloat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateFloat;
  return proto.UpdateFloat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateFloat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateFloat}
 */
proto.UpdateFloat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Target;
      reader.readMessage(value,proto.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateFloat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateFloat.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateFloat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateFloat.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Target.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateFloat} The clone.
 */
proto.UpdateFloat.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateFloat} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Target target = 1;
 * @return {proto.Target}
 */
proto.UpdateFloat.prototype.getTarget = function() {
  return /** @type{proto.Target} */ (
    jspb.Message.getWrapperField(this, proto.Target, 1));
};


/** @param {proto.Target|undefined} value  */
proto.UpdateFloat.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateFloat.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateFloat.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.UpdateFloat.prototype.getValue = function() {
  return /** @type {number} */ (!this.hasValue() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.UpdateFloat.prototype.setValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateFloat.oneofGroups_[0], value);
};


proto.UpdateFloat.prototype.clearValue = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateFloat.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateFloat.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultFloatOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultFloatOk.oneofGroups_);
};
goog.inherits(proto.UpdateResultFloatOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultFloatOk.displayName = 'proto.UpdateResultFloatOk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultFloatOk.oneofGroups_ = [[1],[2]];

/**
 * @enum {number}
 */
proto.UpdateResultFloatOk.BeforeOptionalCase = {
  BEFORE_OPTIONAL_NOT_SET: 0,
  BEFORE: 1
};

/**
 * @return {proto.UpdateResultFloatOk.BeforeOptionalCase}
 */
proto.UpdateResultFloatOk.prototype.getBeforeOptionalCase = function() {
  return /** @type {proto.UpdateResultFloatOk.BeforeOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultFloatOk.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.UpdateResultFloatOk.AfterOptionalCase = {
  AFTER_OPTIONAL_NOT_SET: 0,
  AFTER: 2
};

/**
 * @return {proto.UpdateResultFloatOk.AfterOptionalCase}
 */
proto.UpdateResultFloatOk.prototype.getAfterOptionalCase = function() {
  return /** @type {proto.UpdateResultFloatOk.AfterOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultFloatOk.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultFloatOk.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultFloatOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultFloatOk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultFloatOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: jspb.Message.getOptionalFloatingPointField(msg, 1),
    after: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultFloatOk}
 */
proto.UpdateResultFloatOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultFloatOk;
  return proto.UpdateResultFloatOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultFloatOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultFloatOk}
 */
proto.UpdateResultFloatOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBefore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultFloatOk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultFloatOk.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultFloatOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultFloatOk.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultFloatOk} The clone.
 */
proto.UpdateResultFloatOk.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultFloatOk} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float before = 1;
 * @return {number}
 */
proto.UpdateResultFloatOk.prototype.getBefore = function() {
  return /** @type {number} */ (!this.hasBefore() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.UpdateResultFloatOk.prototype.setBefore = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultFloatOk.oneofGroups_[0], value);
};


proto.UpdateResultFloatOk.prototype.clearBefore = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultFloatOk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultFloatOk.prototype.hasBefore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float after = 2;
 * @return {number}
 */
proto.UpdateResultFloatOk.prototype.getAfter = function() {
  return /** @type {number} */ (!this.hasAfter() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.UpdateResultFloatOk.prototype.setAfter = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultFloatOk.oneofGroups_[1], value);
};


proto.UpdateResultFloatOk.prototype.clearAfter = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultFloatOk.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultFloatOk.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultFloatSame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultFloatSame.oneofGroups_);
};
goog.inherits(proto.UpdateResultFloatSame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultFloatSame.displayName = 'proto.UpdateResultFloatSame';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultFloatSame.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.UpdateResultFloatSame.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 1
};

/**
 * @return {proto.UpdateResultFloatSame.ValueOptionalCase}
 */
proto.UpdateResultFloatSame.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateResultFloatSame.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultFloatSame.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultFloatSame.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultFloatSame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultFloatSame} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultFloatSame.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getOptionalFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultFloatSame}
 */
proto.UpdateResultFloatSame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultFloatSame;
  return proto.UpdateResultFloatSame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultFloatSame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultFloatSame}
 */
proto.UpdateResultFloatSame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultFloatSame} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultFloatSame.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultFloatSame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultFloatSame.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultFloatSame} The clone.
 */
proto.UpdateResultFloatSame.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultFloatSame} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.UpdateResultFloatSame.prototype.getValue = function() {
  return /** @type {number} */ (!this.hasValue() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.UpdateResultFloatSame.prototype.setValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultFloatSame.oneofGroups_[0], value);
};


proto.UpdateResultFloatSame.prototype.clearValue = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultFloatSame.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultFloatSame.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultFloat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultFloat.oneofGroups_);
};
goog.inherits(proto.UpdateResultFloat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultFloat.displayName = 'proto.UpdateResultFloat';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultFloat.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.UpdateResultFloat.UpdateresultCase = {
  UPDATERESULT_NOT_SET: 0,
  RESULTOK: 1,
  RESULTSAME: 2,
  ERROR: 3
};

/**
 * @return {proto.UpdateResultFloat.UpdateresultCase}
 */
proto.UpdateResultFloat.prototype.getUpdateresultCase = function() {
  return /** @type {proto.UpdateResultFloat.UpdateresultCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultFloat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultFloat.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultFloat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultFloat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultFloat.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultok: (f = msg.getResultok()) && proto.UpdateResultFloatOk.toObject(includeInstance, f),
    resultsame: (f = msg.getResultsame()) && proto.UpdateResultFloatSame.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.UpdateResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultFloat}
 */
proto.UpdateResultFloat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultFloat;
  return proto.UpdateResultFloat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultFloat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultFloat}
 */
proto.UpdateResultFloat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UpdateResultFloatOk;
      reader.readMessage(value,proto.UpdateResultFloatOk.deserializeBinaryFromReader);
      msg.setResultok(value);
      break;
    case 2:
      var value = new proto.UpdateResultFloatSame;
      reader.readMessage(value,proto.UpdateResultFloatSame.deserializeBinaryFromReader);
      msg.setResultsame(value);
      break;
    case 3:
      var value = new proto.UpdateResultError;
      reader.readMessage(value,proto.UpdateResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultFloat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultFloat.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultFloat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultFloat.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UpdateResultFloatOk.serializeBinaryToWriter
    );
  }
  f = this.getResultsame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateResultFloatSame.serializeBinaryToWriter
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UpdateResultError.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultFloat} The clone.
 */
proto.UpdateResultFloat.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultFloat} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UpdateResultFloatOk resultOk = 1;
 * @return {proto.UpdateResultFloatOk}
 */
proto.UpdateResultFloat.prototype.getResultok = function() {
  return /** @type{proto.UpdateResultFloatOk} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultFloatOk, 1));
};


/** @param {proto.UpdateResultFloatOk|undefined} value  */
proto.UpdateResultFloat.prototype.setResultok = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultFloat.oneofGroups_[0], value);
};


proto.UpdateResultFloat.prototype.clearResultok = function() {
  this.setResultok(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultFloat.prototype.hasResultok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateResultFloatSame resultSame = 2;
 * @return {proto.UpdateResultFloatSame}
 */
proto.UpdateResultFloat.prototype.getResultsame = function() {
  return /** @type{proto.UpdateResultFloatSame} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultFloatSame, 2));
};


/** @param {proto.UpdateResultFloatSame|undefined} value  */
proto.UpdateResultFloat.prototype.setResultsame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultFloat.oneofGroups_[0], value);
};


proto.UpdateResultFloat.prototype.clearResultsame = function() {
  this.setResultsame(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultFloat.prototype.hasResultsame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateResultError error = 3;
 * @return {proto.UpdateResultError}
 */
proto.UpdateResultFloat.prototype.getError = function() {
  return /** @type{proto.UpdateResultError} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultError, 3));
};


/** @param {proto.UpdateResultError|undefined} value  */
proto.UpdateResultFloat.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.UpdateResultFloat.oneofGroups_[0], value);
};


proto.UpdateResultFloat.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultFloat.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateReadName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateReadName.oneofGroups_);
};
goog.inherits(proto.UpdateReadName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateReadName.displayName = 'proto.UpdateReadName';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateReadName.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.UpdateReadName.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE_STRING: 2,
  VALUE_BOOL: 3
};

/**
 * @return {proto.UpdateReadName.ValueOptionalCase}
 */
proto.UpdateReadName.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateReadName.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateReadName.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateReadName.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateReadName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateReadName} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateReadName.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.Target.toObject(includeInstance, f),
    valueString: jspb.Message.getField(msg, 2),
    valueBool: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateReadName}
 */
proto.UpdateReadName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateReadName;
  return proto.UpdateReadName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateReadName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateReadName}
 */
proto.UpdateReadName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Target;
      reader.readMessage(value,proto.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueString(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValueBool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateReadName} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateReadName.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateReadName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateReadName.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Target.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateReadName} The clone.
 */
proto.UpdateReadName.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateReadName} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Target target = 1;
 * @return {proto.Target}
 */
proto.UpdateReadName.prototype.getTarget = function() {
  return /** @type{proto.Target} */ (
    jspb.Message.getWrapperField(this, proto.Target, 1));
};


/** @param {proto.Target|undefined} value  */
proto.UpdateReadName.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateReadName.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateReadName.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value_string = 2;
 * @return {string}
 */
proto.UpdateReadName.prototype.getValueString = function() {
  return /** @type {string} */ (!this.hasValueString() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.UpdateReadName.prototype.setValueString = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateReadName.oneofGroups_[0], value);
};


proto.UpdateReadName.prototype.clearValueString = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateReadName.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateReadName.prototype.hasValueString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool value_bool = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UpdateReadName.prototype.getValueBool = function() {
  return /** @type {boolean} */ (!this.hasValueBool() ? false : jspb.Message.getField(this, 3));
};


/** @param {boolean?|undefined} value  */
proto.UpdateReadName.prototype.setValueBool = function(value) {
  jspb.Message.setOneofField(this, 3, proto.UpdateReadName.oneofGroups_[0], value);
};


proto.UpdateReadName.prototype.clearValueBool = function() {
  jspb.Message.setOneofField(this, 3, proto.UpdateReadName.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateReadName.prototype.hasValueBool = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateReadNameOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateReadNameOk.oneofGroups_);
};
goog.inherits(proto.UpdateReadNameOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateReadNameOk.displayName = 'proto.UpdateReadNameOk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateReadNameOk.oneofGroups_ = [[1,2],[3,4]];

/**
 * @enum {number}
 */
proto.UpdateReadNameOk.BeforeOptionalCase = {
  BEFORE_OPTIONAL_NOT_SET: 0,
  BEFORE_STRING: 1,
  BEFORE_BOOL: 2
};

/**
 * @return {proto.UpdateReadNameOk.BeforeOptionalCase}
 */
proto.UpdateReadNameOk.prototype.getBeforeOptionalCase = function() {
  return /** @type {proto.UpdateReadNameOk.BeforeOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateReadNameOk.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.UpdateReadNameOk.AfterOptionalCase = {
  AFTER_OPTIONAL_NOT_SET: 0,
  AFTER_STRING: 3,
  AFTER_BOOL: 4
};

/**
 * @return {proto.UpdateReadNameOk.AfterOptionalCase}
 */
proto.UpdateReadNameOk.prototype.getAfterOptionalCase = function() {
  return /** @type {proto.UpdateReadNameOk.AfterOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateReadNameOk.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateReadNameOk.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateReadNameOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateReadNameOk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateReadNameOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    beforeString: jspb.Message.getField(msg, 1),
    beforeBool: jspb.Message.getField(msg, 2),
    afterString: jspb.Message.getField(msg, 3),
    afterBool: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateReadNameOk}
 */
proto.UpdateReadNameOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateReadNameOk;
  return proto.UpdateReadNameOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateReadNameOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateReadNameOk}
 */
proto.UpdateReadNameOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeforeString(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBeforeBool(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAfterString(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAfterBool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateReadNameOk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateReadNameOk.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateReadNameOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateReadNameOk.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateReadNameOk} The clone.
 */
proto.UpdateReadNameOk.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateReadNameOk} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string before_string = 1;
 * @return {string}
 */
proto.UpdateReadNameOk.prototype.getBeforeString = function() {
  return /** @type {string} */ (!this.hasBeforeString() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string?|undefined} value  */
proto.UpdateReadNameOk.prototype.setBeforeString = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateReadNameOk.oneofGroups_[0], value);
};


proto.UpdateReadNameOk.prototype.clearBeforeString = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateReadNameOk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateReadNameOk.prototype.hasBeforeString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool before_bool = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UpdateReadNameOk.prototype.getBeforeBool = function() {
  return /** @type {boolean} */ (!this.hasBeforeBool() ? false : jspb.Message.getField(this, 2));
};


/** @param {boolean?|undefined} value  */
proto.UpdateReadNameOk.prototype.setBeforeBool = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateReadNameOk.oneofGroups_[0], value);
};


proto.UpdateReadNameOk.prototype.clearBeforeBool = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateReadNameOk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateReadNameOk.prototype.hasBeforeBool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string after_string = 3;
 * @return {string}
 */
proto.UpdateReadNameOk.prototype.getAfterString = function() {
  return /** @type {string} */ (!this.hasAfterString() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.UpdateReadNameOk.prototype.setAfterString = function(value) {
  jspb.Message.setOneofField(this, 3, proto.UpdateReadNameOk.oneofGroups_[1], value);
};


proto.UpdateReadNameOk.prototype.clearAfterString = function() {
  jspb.Message.setOneofField(this, 3, proto.UpdateReadNameOk.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateReadNameOk.prototype.hasAfterString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool after_bool = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UpdateReadNameOk.prototype.getAfterBool = function() {
  return /** @type {boolean} */ (!this.hasAfterBool() ? false : jspb.Message.getField(this, 4));
};


/** @param {boolean?|undefined} value  */
proto.UpdateReadNameOk.prototype.setAfterBool = function(value) {
  jspb.Message.setOneofField(this, 4, proto.UpdateReadNameOk.oneofGroups_[1], value);
};


proto.UpdateReadNameOk.prototype.clearAfterBool = function() {
  jspb.Message.setOneofField(this, 4, proto.UpdateReadNameOk.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateReadNameOk.prototype.hasAfterBool = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultReadNameSame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultReadNameSame.oneofGroups_);
};
goog.inherits(proto.UpdateResultReadNameSame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultReadNameSame.displayName = 'proto.UpdateResultReadNameSame';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultReadNameSame.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.UpdateResultReadNameSame.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE_STRING: 1,
  VALUE_BOOL: 2
};

/**
 * @return {proto.UpdateResultReadNameSame.ValueOptionalCase}
 */
proto.UpdateResultReadNameSame.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateResultReadNameSame.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultReadNameSame.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultReadNameSame.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultReadNameSame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultReadNameSame} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultReadNameSame.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueString: jspb.Message.getField(msg, 1),
    valueBool: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultReadNameSame}
 */
proto.UpdateResultReadNameSame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultReadNameSame;
  return proto.UpdateResultReadNameSame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultReadNameSame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultReadNameSame}
 */
proto.UpdateResultReadNameSame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueString(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValueBool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultReadNameSame} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultReadNameSame.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultReadNameSame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultReadNameSame.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultReadNameSame} The clone.
 */
proto.UpdateResultReadNameSame.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultReadNameSame} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string value_string = 1;
 * @return {string}
 */
proto.UpdateResultReadNameSame.prototype.getValueString = function() {
  return /** @type {string} */ (!this.hasValueString() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string?|undefined} value  */
proto.UpdateResultReadNameSame.prototype.setValueString = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultReadNameSame.oneofGroups_[0], value);
};


proto.UpdateResultReadNameSame.prototype.clearValueString = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultReadNameSame.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultReadNameSame.prototype.hasValueString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool value_bool = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UpdateResultReadNameSame.prototype.getValueBool = function() {
  return /** @type {boolean} */ (!this.hasValueBool() ? false : jspb.Message.getField(this, 2));
};


/** @param {boolean?|undefined} value  */
proto.UpdateResultReadNameSame.prototype.setValueBool = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultReadNameSame.oneofGroups_[0], value);
};


proto.UpdateResultReadNameSame.prototype.clearValueBool = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultReadNameSame.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultReadNameSame.prototype.hasValueBool = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultReadName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultReadName.oneofGroups_);
};
goog.inherits(proto.UpdateResultReadName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultReadName.displayName = 'proto.UpdateResultReadName';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultReadName.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.UpdateResultReadName.UpdateresultCase = {
  UPDATERESULT_NOT_SET: 0,
  RESULTOK: 1,
  RESULTSAME: 2,
  ERROR: 3
};

/**
 * @return {proto.UpdateResultReadName.UpdateresultCase}
 */
proto.UpdateResultReadName.prototype.getUpdateresultCase = function() {
  return /** @type {proto.UpdateResultReadName.UpdateresultCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultReadName.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultReadName.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultReadName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultReadName} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultReadName.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultok: (f = msg.getResultok()) && proto.UpdateReadNameOk.toObject(includeInstance, f),
    resultsame: (f = msg.getResultsame()) && proto.UpdateResultReadNameSame.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.UpdateResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultReadName}
 */
proto.UpdateResultReadName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultReadName;
  return proto.UpdateResultReadName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultReadName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultReadName}
 */
proto.UpdateResultReadName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UpdateReadNameOk;
      reader.readMessage(value,proto.UpdateReadNameOk.deserializeBinaryFromReader);
      msg.setResultok(value);
      break;
    case 2:
      var value = new proto.UpdateResultReadNameSame;
      reader.readMessage(value,proto.UpdateResultReadNameSame.deserializeBinaryFromReader);
      msg.setResultsame(value);
      break;
    case 3:
      var value = new proto.UpdateResultError;
      reader.readMessage(value,proto.UpdateResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultReadName} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultReadName.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultReadName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultReadName.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UpdateReadNameOk.serializeBinaryToWriter
    );
  }
  f = this.getResultsame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateResultReadNameSame.serializeBinaryToWriter
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UpdateResultError.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultReadName} The clone.
 */
proto.UpdateResultReadName.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultReadName} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UpdateReadNameOk resultOk = 1;
 * @return {proto.UpdateReadNameOk}
 */
proto.UpdateResultReadName.prototype.getResultok = function() {
  return /** @type{proto.UpdateReadNameOk} */ (
    jspb.Message.getWrapperField(this, proto.UpdateReadNameOk, 1));
};


/** @param {proto.UpdateReadNameOk|undefined} value  */
proto.UpdateResultReadName.prototype.setResultok = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultReadName.oneofGroups_[0], value);
};


proto.UpdateResultReadName.prototype.clearResultok = function() {
  this.setResultok(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultReadName.prototype.hasResultok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateResultReadNameSame resultSame = 2;
 * @return {proto.UpdateResultReadNameSame}
 */
proto.UpdateResultReadName.prototype.getResultsame = function() {
  return /** @type{proto.UpdateResultReadNameSame} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultReadNameSame, 2));
};


/** @param {proto.UpdateResultReadNameSame|undefined} value  */
proto.UpdateResultReadName.prototype.setResultsame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultReadName.oneofGroups_[0], value);
};


proto.UpdateResultReadName.prototype.clearResultsame = function() {
  this.setResultsame(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultReadName.prototype.hasResultsame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateResultError error = 3;
 * @return {proto.UpdateResultError}
 */
proto.UpdateResultReadName.prototype.getError = function() {
  return /** @type{proto.UpdateResultError} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultError, 3));
};


/** @param {proto.UpdateResultError|undefined} value  */
proto.UpdateResultReadName.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.UpdateResultReadName.oneofGroups_[0], value);
};


proto.UpdateResultReadName.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultReadName.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateUint32 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateUint32.oneofGroups_);
};
goog.inherits(proto.UpdateUint32, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateUint32.displayName = 'proto.UpdateUint32';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateUint32.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.UpdateUint32.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 2
};

/**
 * @return {proto.UpdateUint32.ValueOptionalCase}
 */
proto.UpdateUint32.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateUint32.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateUint32.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateUint32.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateUint32.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateUint32} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateUint32.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.Target.toObject(includeInstance, f),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateUint32}
 */
proto.UpdateUint32.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateUint32;
  return proto.UpdateUint32.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateUint32} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateUint32}
 */
proto.UpdateUint32.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Target;
      reader.readMessage(value,proto.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateUint32} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateUint32.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateUint32.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateUint32.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Target.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateUint32} The clone.
 */
proto.UpdateUint32.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateUint32} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Target target = 1;
 * @return {proto.Target}
 */
proto.UpdateUint32.prototype.getTarget = function() {
  return /** @type{proto.Target} */ (
    jspb.Message.getWrapperField(this, proto.Target, 1));
};


/** @param {proto.Target|undefined} value  */
proto.UpdateUint32.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateUint32.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateUint32.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 value = 2;
 * @return {number}
 */
proto.UpdateUint32.prototype.getValue = function() {
  return /** @type {number} */ (!this.hasValue() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.UpdateUint32.prototype.setValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateUint32.oneofGroups_[0], value);
};


proto.UpdateUint32.prototype.clearValue = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateUint32.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateUint32.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultUint32Ok = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultUint32Ok.oneofGroups_);
};
goog.inherits(proto.UpdateResultUint32Ok, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultUint32Ok.displayName = 'proto.UpdateResultUint32Ok';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultUint32Ok.oneofGroups_ = [[1],[2]];

/**
 * @enum {number}
 */
proto.UpdateResultUint32Ok.BeforeOptionalCase = {
  BEFORE_OPTIONAL_NOT_SET: 0,
  BEFORE: 1
};

/**
 * @return {proto.UpdateResultUint32Ok.BeforeOptionalCase}
 */
proto.UpdateResultUint32Ok.prototype.getBeforeOptionalCase = function() {
  return /** @type {proto.UpdateResultUint32Ok.BeforeOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultUint32Ok.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.UpdateResultUint32Ok.AfterOptionalCase = {
  AFTER_OPTIONAL_NOT_SET: 0,
  AFTER: 2
};

/**
 * @return {proto.UpdateResultUint32Ok.AfterOptionalCase}
 */
proto.UpdateResultUint32Ok.prototype.getAfterOptionalCase = function() {
  return /** @type {proto.UpdateResultUint32Ok.AfterOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultUint32Ok.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultUint32Ok.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultUint32Ok.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultUint32Ok} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultUint32Ok.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: jspb.Message.getField(msg, 1),
    after: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultUint32Ok}
 */
proto.UpdateResultUint32Ok.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultUint32Ok;
  return proto.UpdateResultUint32Ok.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultUint32Ok} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultUint32Ok}
 */
proto.UpdateResultUint32Ok.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBefore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultUint32Ok} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultUint32Ok.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultUint32Ok.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultUint32Ok.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultUint32Ok} The clone.
 */
proto.UpdateResultUint32Ok.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultUint32Ok} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 before = 1;
 * @return {number}
 */
proto.UpdateResultUint32Ok.prototype.getBefore = function() {
  return /** @type {number} */ (!this.hasBefore() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.UpdateResultUint32Ok.prototype.setBefore = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultUint32Ok.oneofGroups_[0], value);
};


proto.UpdateResultUint32Ok.prototype.clearBefore = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultUint32Ok.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultUint32Ok.prototype.hasBefore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 after = 2;
 * @return {number}
 */
proto.UpdateResultUint32Ok.prototype.getAfter = function() {
  return /** @type {number} */ (!this.hasAfter() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.UpdateResultUint32Ok.prototype.setAfter = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultUint32Ok.oneofGroups_[1], value);
};


proto.UpdateResultUint32Ok.prototype.clearAfter = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateResultUint32Ok.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultUint32Ok.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultUint32Same = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultUint32Same.oneofGroups_);
};
goog.inherits(proto.UpdateResultUint32Same, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultUint32Same.displayName = 'proto.UpdateResultUint32Same';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultUint32Same.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.UpdateResultUint32Same.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 1
};

/**
 * @return {proto.UpdateResultUint32Same.ValueOptionalCase}
 */
proto.UpdateResultUint32Same.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateResultUint32Same.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultUint32Same.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultUint32Same.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultUint32Same.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultUint32Same} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultUint32Same.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultUint32Same}
 */
proto.UpdateResultUint32Same.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultUint32Same;
  return proto.UpdateResultUint32Same.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultUint32Same} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultUint32Same}
 */
proto.UpdateResultUint32Same.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultUint32Same} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultUint32Same.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultUint32Same.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultUint32Same.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultUint32Same} The clone.
 */
proto.UpdateResultUint32Same.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultUint32Same} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.UpdateResultUint32Same.prototype.getValue = function() {
  return /** @type {number} */ (!this.hasValue() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.UpdateResultUint32Same.prototype.setValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultUint32Same.oneofGroups_[0], value);
};


proto.UpdateResultUint32Same.prototype.clearValue = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateResultUint32Same.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultUint32Same.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultUint32 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultUint32.oneofGroups_);
};
goog.inherits(proto.UpdateResultUint32, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultUint32.displayName = 'proto.UpdateResultUint32';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultUint32.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.UpdateResultUint32.UpdateresultCase = {
  UPDATERESULT_NOT_SET: 0,
  RESULTOK: 1,
  RESULTSAME: 2,
  ERROR: 3
};

/**
 * @return {proto.UpdateResultUint32.UpdateresultCase}
 */
proto.UpdateResultUint32.prototype.getUpdateresultCase = function() {
  return /** @type {proto.UpdateResultUint32.UpdateresultCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultUint32.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultUint32.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultUint32.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultUint32} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultUint32.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultok: (f = msg.getResultok()) && proto.UpdateResultUint32Ok.toObject(includeInstance, f),
    resultsame: (f = msg.getResultsame()) && proto.UpdateResultUint32Same.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.UpdateResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultUint32}
 */
proto.UpdateResultUint32.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultUint32;
  return proto.UpdateResultUint32.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultUint32} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultUint32}
 */
proto.UpdateResultUint32.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UpdateResultUint32Ok;
      reader.readMessage(value,proto.UpdateResultUint32Ok.deserializeBinaryFromReader);
      msg.setResultok(value);
      break;
    case 2:
      var value = new proto.UpdateResultUint32Same;
      reader.readMessage(value,proto.UpdateResultUint32Same.deserializeBinaryFromReader);
      msg.setResultsame(value);
      break;
    case 3:
      var value = new proto.UpdateResultError;
      reader.readMessage(value,proto.UpdateResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultUint32} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultUint32.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultUint32.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultUint32.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UpdateResultUint32Ok.serializeBinaryToWriter
    );
  }
  f = this.getResultsame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateResultUint32Same.serializeBinaryToWriter
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UpdateResultError.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultUint32} The clone.
 */
proto.UpdateResultUint32.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultUint32} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UpdateResultUint32Ok resultOk = 1;
 * @return {proto.UpdateResultUint32Ok}
 */
proto.UpdateResultUint32.prototype.getResultok = function() {
  return /** @type{proto.UpdateResultUint32Ok} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultUint32Ok, 1));
};


/** @param {proto.UpdateResultUint32Ok|undefined} value  */
proto.UpdateResultUint32.prototype.setResultok = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultUint32.oneofGroups_[0], value);
};


proto.UpdateResultUint32.prototype.clearResultok = function() {
  this.setResultok(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultUint32.prototype.hasResultok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateResultUint32Same resultSame = 2;
 * @return {proto.UpdateResultUint32Same}
 */
proto.UpdateResultUint32.prototype.getResultsame = function() {
  return /** @type{proto.UpdateResultUint32Same} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultUint32Same, 2));
};


/** @param {proto.UpdateResultUint32Same|undefined} value  */
proto.UpdateResultUint32.prototype.setResultsame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultUint32.oneofGroups_[0], value);
};


proto.UpdateResultUint32.prototype.clearResultsame = function() {
  this.setResultsame(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultUint32.prototype.hasResultsame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateResultError error = 3;
 * @return {proto.UpdateResultError}
 */
proto.UpdateResultUint32.prototype.getError = function() {
  return /** @type{proto.UpdateResultError} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultError, 3));
};


/** @param {proto.UpdateResultError|undefined} value  */
proto.UpdateResultUint32.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.UpdateResultUint32.oneofGroups_[0], value);
};


proto.UpdateResultUint32.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultUint32.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveFromMainDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveFromMainDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveFromMainDictionary.displayName = 'proto.RemoveFromMainDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveFromMainDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveFromMainDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveFromMainDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemoveFromMainDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    guild: msg.getGuild(),
    key: msg.getKey()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveFromMainDictionary}
 */
proto.RemoveFromMainDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveFromMainDictionary;
  return proto.RemoveFromMainDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveFromMainDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveFromMainDictionary}
 */
proto.RemoveFromMainDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuild(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RemoveFromMainDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveFromMainDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveFromMainDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveFromMainDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuild();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.RemoveFromMainDictionary} The clone.
 */
proto.RemoveFromMainDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.RemoveFromMainDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string guild = 1;
 * @return {string}
 */
proto.RemoveFromMainDictionary.prototype.getGuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.RemoveFromMainDictionary.prototype.setGuild = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.RemoveFromMainDictionary.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.RemoveFromMainDictionary.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultDictionaryEntryAOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultDictionaryEntryAOk.oneofGroups_);
};
goog.inherits(proto.UpdateResultDictionaryEntryAOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultDictionaryEntryAOk.displayName = 'proto.UpdateResultDictionaryEntryAOk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultDictionaryEntryAOk.oneofGroups_ = [[1],[2]];

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryAOk.BeforeOptionalCase = {
  BEFORE_OPTIONAL_NOT_SET: 0,
  BEFORE: 1
};

/**
 * @return {proto.UpdateResultDictionaryEntryAOk.BeforeOptionalCase}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.getBeforeOptionalCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryAOk.BeforeOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryAOk.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryAOk.AfterOptionalCase = {
  AFTER_OPTIONAL_NOT_SET: 0,
  AFTER: 2
};

/**
 * @return {proto.UpdateResultDictionaryEntryAOk.AfterOptionalCase}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.getAfterOptionalCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryAOk.AfterOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryAOk.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultDictionaryEntryAOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultDictionaryEntryAOk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryAOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: (f = msg.getBefore()) && config_pb.DictionaryEntryA.toObject(includeInstance, f),
    after: (f = msg.getAfter()) && config_pb.DictionaryEntryA.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultDictionaryEntryAOk}
 */
proto.UpdateResultDictionaryEntryAOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultDictionaryEntryAOk;
  return proto.UpdateResultDictionaryEntryAOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultDictionaryEntryAOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultDictionaryEntryAOk}
 */
proto.UpdateResultDictionaryEntryAOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new config_pb.DictionaryEntryA;
      reader.readMessage(value,config_pb.DictionaryEntryA.deserializeBinaryFromReader);
      msg.setBefore(value);
      break;
    case 2:
      var value = new config_pb.DictionaryEntryA;
      reader.readMessage(value,config_pb.DictionaryEntryA.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultDictionaryEntryAOk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryAOk.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryAOk.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBefore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      config_pb.DictionaryEntryA.serializeBinaryToWriter
    );
  }
  f = this.getAfter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      config_pb.DictionaryEntryA.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultDictionaryEntryAOk} The clone.
 */
proto.UpdateResultDictionaryEntryAOk.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultDictionaryEntryAOk} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional config.DictionaryEntryA before = 1;
 * @return {proto.config.DictionaryEntryA}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.getBefore = function() {
  return /** @type{proto.config.DictionaryEntryA} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryA, 1));
};


/** @param {proto.config.DictionaryEntryA|undefined} value  */
proto.UpdateResultDictionaryEntryAOk.prototype.setBefore = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultDictionaryEntryAOk.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryAOk.prototype.clearBefore = function() {
  this.setBefore(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.hasBefore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional config.DictionaryEntryA after = 2;
 * @return {proto.config.DictionaryEntryA}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.getAfter = function() {
  return /** @type{proto.config.DictionaryEntryA} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryA, 2));
};


/** @param {proto.config.DictionaryEntryA|undefined} value  */
proto.UpdateResultDictionaryEntryAOk.prototype.setAfter = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultDictionaryEntryAOk.oneofGroups_[1], value);
};


proto.UpdateResultDictionaryEntryAOk.prototype.clearAfter = function() {
  this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryAOk.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultDictionaryEntryASame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultDictionaryEntryASame.oneofGroups_);
};
goog.inherits(proto.UpdateResultDictionaryEntryASame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultDictionaryEntryASame.displayName = 'proto.UpdateResultDictionaryEntryASame';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultDictionaryEntryASame.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryASame.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 1
};

/**
 * @return {proto.UpdateResultDictionaryEntryASame.ValueOptionalCase}
 */
proto.UpdateResultDictionaryEntryASame.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryASame.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryASame.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryASame.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultDictionaryEntryASame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultDictionaryEntryASame} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryASame.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && config_pb.DictionaryEntryA.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultDictionaryEntryASame}
 */
proto.UpdateResultDictionaryEntryASame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultDictionaryEntryASame;
  return proto.UpdateResultDictionaryEntryASame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultDictionaryEntryASame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultDictionaryEntryASame}
 */
proto.UpdateResultDictionaryEntryASame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new config_pb.DictionaryEntryA;
      reader.readMessage(value,config_pb.DictionaryEntryA.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultDictionaryEntryASame} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryASame.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultDictionaryEntryASame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryASame.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      config_pb.DictionaryEntryA.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultDictionaryEntryASame} The clone.
 */
proto.UpdateResultDictionaryEntryASame.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultDictionaryEntryASame} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional config.DictionaryEntryA value = 1;
 * @return {proto.config.DictionaryEntryA}
 */
proto.UpdateResultDictionaryEntryASame.prototype.getValue = function() {
  return /** @type{proto.config.DictionaryEntryA} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryA, 1));
};


/** @param {proto.config.DictionaryEntryA|undefined} value  */
proto.UpdateResultDictionaryEntryASame.prototype.setValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultDictionaryEntryASame.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryASame.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryASame.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultDictionaryEntryA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultDictionaryEntryA.oneofGroups_);
};
goog.inherits(proto.UpdateResultDictionaryEntryA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultDictionaryEntryA.displayName = 'proto.UpdateResultDictionaryEntryA';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultDictionaryEntryA.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryA.UpdateresultCase = {
  UPDATERESULT_NOT_SET: 0,
  RESULTOK: 1,
  RESULTSAME: 2,
  ERROR: 3
};

/**
 * @return {proto.UpdateResultDictionaryEntryA.UpdateresultCase}
 */
proto.UpdateResultDictionaryEntryA.prototype.getUpdateresultCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryA.UpdateresultCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryA.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryA.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultDictionaryEntryA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultDictionaryEntryA} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryA.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultok: (f = msg.getResultok()) && proto.UpdateResultDictionaryEntryAOk.toObject(includeInstance, f),
    resultsame: (f = msg.getResultsame()) && proto.UpdateResultDictionaryEntryASame.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.UpdateResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultDictionaryEntryA}
 */
proto.UpdateResultDictionaryEntryA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultDictionaryEntryA;
  return proto.UpdateResultDictionaryEntryA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultDictionaryEntryA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultDictionaryEntryA}
 */
proto.UpdateResultDictionaryEntryA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UpdateResultDictionaryEntryAOk;
      reader.readMessage(value,proto.UpdateResultDictionaryEntryAOk.deserializeBinaryFromReader);
      msg.setResultok(value);
      break;
    case 2:
      var value = new proto.UpdateResultDictionaryEntryASame;
      reader.readMessage(value,proto.UpdateResultDictionaryEntryASame.deserializeBinaryFromReader);
      msg.setResultsame(value);
      break;
    case 3:
      var value = new proto.UpdateResultError;
      reader.readMessage(value,proto.UpdateResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultDictionaryEntryA} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryA.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultDictionaryEntryA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryA.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UpdateResultDictionaryEntryAOk.serializeBinaryToWriter
    );
  }
  f = this.getResultsame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateResultDictionaryEntryASame.serializeBinaryToWriter
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UpdateResultError.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultDictionaryEntryA} The clone.
 */
proto.UpdateResultDictionaryEntryA.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultDictionaryEntryA} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UpdateResultDictionaryEntryAOk resultOk = 1;
 * @return {proto.UpdateResultDictionaryEntryAOk}
 */
proto.UpdateResultDictionaryEntryA.prototype.getResultok = function() {
  return /** @type{proto.UpdateResultDictionaryEntryAOk} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultDictionaryEntryAOk, 1));
};


/** @param {proto.UpdateResultDictionaryEntryAOk|undefined} value  */
proto.UpdateResultDictionaryEntryA.prototype.setResultok = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultDictionaryEntryA.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryA.prototype.clearResultok = function() {
  this.setResultok(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryA.prototype.hasResultok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateResultDictionaryEntryASame resultSame = 2;
 * @return {proto.UpdateResultDictionaryEntryASame}
 */
proto.UpdateResultDictionaryEntryA.prototype.getResultsame = function() {
  return /** @type{proto.UpdateResultDictionaryEntryASame} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultDictionaryEntryASame, 2));
};


/** @param {proto.UpdateResultDictionaryEntryASame|undefined} value  */
proto.UpdateResultDictionaryEntryA.prototype.setResultsame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultDictionaryEntryA.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryA.prototype.clearResultsame = function() {
  this.setResultsame(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryA.prototype.hasResultsame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateResultError error = 3;
 * @return {proto.UpdateResultError}
 */
proto.UpdateResultDictionaryEntryA.prototype.getError = function() {
  return /** @type{proto.UpdateResultError} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultError, 3));
};


/** @param {proto.UpdateResultError|undefined} value  */
proto.UpdateResultDictionaryEntryA.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.UpdateResultDictionaryEntryA.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryA.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryA.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateOrInsertMainDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateOrInsertMainDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateOrInsertMainDictionary.displayName = 'proto.UpdateOrInsertMainDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateOrInsertMainDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateOrInsertMainDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateOrInsertMainDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateOrInsertMainDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    guild: msg.getGuild(),
    value: (f = msg.getValue()) && config_pb.DictionaryEntryA.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateOrInsertMainDictionary}
 */
proto.UpdateOrInsertMainDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateOrInsertMainDictionary;
  return proto.UpdateOrInsertMainDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateOrInsertMainDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateOrInsertMainDictionary}
 */
proto.UpdateOrInsertMainDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuild(value);
      break;
    case 2:
      var value = new config_pb.DictionaryEntryA;
      reader.readMessage(value,config_pb.DictionaryEntryA.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateOrInsertMainDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateOrInsertMainDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateOrInsertMainDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateOrInsertMainDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuild();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      config_pb.DictionaryEntryA.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateOrInsertMainDictionary} The clone.
 */
proto.UpdateOrInsertMainDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateOrInsertMainDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string guild = 1;
 * @return {string}
 */
proto.UpdateOrInsertMainDictionary.prototype.getGuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.UpdateOrInsertMainDictionary.prototype.setGuild = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional config.DictionaryEntryA value = 2;
 * @return {proto.config.DictionaryEntryA}
 */
proto.UpdateOrInsertMainDictionary.prototype.getValue = function() {
  return /** @type{proto.config.DictionaryEntryA} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryA, 2));
};


/** @param {proto.config.DictionaryEntryA|undefined} value  */
proto.UpdateOrInsertMainDictionary.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UpdateOrInsertMainDictionary.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateOrInsertMainDictionary.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SimpleDictionaryUpdateTargetGuild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SimpleDictionaryUpdateTargetGuild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SimpleDictionaryUpdateTargetGuild.displayName = 'proto.SimpleDictionaryUpdateTargetGuild';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SimpleDictionaryUpdateTargetGuild.prototype.toObject = function(opt_includeInstance) {
  return proto.SimpleDictionaryUpdateTargetGuild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SimpleDictionaryUpdateTargetGuild} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SimpleDictionaryUpdateTargetGuild.toObject = function(includeInstance, msg) {
  var f, obj = {
    guild: msg.getGuild()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SimpleDictionaryUpdateTargetGuild}
 */
proto.SimpleDictionaryUpdateTargetGuild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SimpleDictionaryUpdateTargetGuild;
  return proto.SimpleDictionaryUpdateTargetGuild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SimpleDictionaryUpdateTargetGuild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SimpleDictionaryUpdateTargetGuild}
 */
proto.SimpleDictionaryUpdateTargetGuild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SimpleDictionaryUpdateTargetGuild} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SimpleDictionaryUpdateTargetGuild.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SimpleDictionaryUpdateTargetGuild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SimpleDictionaryUpdateTargetGuild.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuild();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SimpleDictionaryUpdateTargetGuild} The clone.
 */
proto.SimpleDictionaryUpdateTargetGuild.prototype.cloneMessage = function() {
  return /** @type {!proto.SimpleDictionaryUpdateTargetGuild} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string guild = 1;
 * @return {string}
 */
proto.SimpleDictionaryUpdateTargetGuild.prototype.getGuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.SimpleDictionaryUpdateTargetGuild.prototype.setGuild = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SimpleDictionaryUpdateTargetSharedDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SimpleDictionaryUpdateTargetSharedDictionary.displayName = 'proto.SimpleDictionaryUpdateTargetSharedDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.SimpleDictionaryUpdateTargetSharedDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SimpleDictionaryUpdateTargetSharedDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SimpleDictionaryUpdateTargetSharedDictionary}
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SimpleDictionaryUpdateTargetSharedDictionary;
  return proto.SimpleDictionaryUpdateTargetSharedDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SimpleDictionaryUpdateTargetSharedDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SimpleDictionaryUpdateTargetSharedDictionary}
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SimpleDictionaryUpdateTargetSharedDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SimpleDictionaryUpdateTargetSharedDictionary} The clone.
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.SimpleDictionaryUpdateTargetSharedDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.SimpleDictionaryUpdateTargetSharedDictionary.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.SimpleDictionaryUpdateTargetSharedDictionary.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SimpleDictionaryUpdateTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SimpleDictionaryUpdateTarget.oneofGroups_);
};
goog.inherits(proto.SimpleDictionaryUpdateTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SimpleDictionaryUpdateTarget.displayName = 'proto.SimpleDictionaryUpdateTarget';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SimpleDictionaryUpdateTarget.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.SimpleDictionaryUpdateTarget.TargetCase = {
  TARGET_NOT_SET: 0,
  BEFORE: 1,
  AFTER: 2,
  SHARED: 3
};

/**
 * @return {proto.SimpleDictionaryUpdateTarget.TargetCase}
 */
proto.SimpleDictionaryUpdateTarget.prototype.getTargetCase = function() {
  return /** @type {proto.SimpleDictionaryUpdateTarget.TargetCase} */(jspb.Message.computeOneofCase(this, proto.SimpleDictionaryUpdateTarget.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SimpleDictionaryUpdateTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.SimpleDictionaryUpdateTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SimpleDictionaryUpdateTarget} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SimpleDictionaryUpdateTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: (f = msg.getBefore()) && proto.SimpleDictionaryUpdateTargetGuild.toObject(includeInstance, f),
    after: (f = msg.getAfter()) && proto.SimpleDictionaryUpdateTargetGuild.toObject(includeInstance, f),
    shared: (f = msg.getShared()) && proto.SimpleDictionaryUpdateTargetSharedDictionary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SimpleDictionaryUpdateTarget}
 */
proto.SimpleDictionaryUpdateTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SimpleDictionaryUpdateTarget;
  return proto.SimpleDictionaryUpdateTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SimpleDictionaryUpdateTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SimpleDictionaryUpdateTarget}
 */
proto.SimpleDictionaryUpdateTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimpleDictionaryUpdateTargetGuild;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTargetGuild.deserializeBinaryFromReader);
      msg.setBefore(value);
      break;
    case 2:
      var value = new proto.SimpleDictionaryUpdateTargetGuild;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTargetGuild.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    case 3:
      var value = new proto.SimpleDictionaryUpdateTargetSharedDictionary;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTargetSharedDictionary.deserializeBinaryFromReader);
      msg.setShared(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SimpleDictionaryUpdateTarget} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SimpleDictionaryUpdateTarget.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SimpleDictionaryUpdateTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SimpleDictionaryUpdateTarget.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBefore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SimpleDictionaryUpdateTargetGuild.serializeBinaryToWriter
    );
  }
  f = this.getAfter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SimpleDictionaryUpdateTargetGuild.serializeBinaryToWriter
    );
  }
  f = this.getShared();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SimpleDictionaryUpdateTargetSharedDictionary.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SimpleDictionaryUpdateTarget} The clone.
 */
proto.SimpleDictionaryUpdateTarget.prototype.cloneMessage = function() {
  return /** @type {!proto.SimpleDictionaryUpdateTarget} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SimpleDictionaryUpdateTargetGuild before = 1;
 * @return {proto.SimpleDictionaryUpdateTargetGuild}
 */
proto.SimpleDictionaryUpdateTarget.prototype.getBefore = function() {
  return /** @type{proto.SimpleDictionaryUpdateTargetGuild} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTargetGuild, 1));
};


/** @param {proto.SimpleDictionaryUpdateTargetGuild|undefined} value  */
proto.SimpleDictionaryUpdateTarget.prototype.setBefore = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.SimpleDictionaryUpdateTarget.oneofGroups_[0], value);
};


proto.SimpleDictionaryUpdateTarget.prototype.clearBefore = function() {
  this.setBefore(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SimpleDictionaryUpdateTarget.prototype.hasBefore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SimpleDictionaryUpdateTargetGuild after = 2;
 * @return {proto.SimpleDictionaryUpdateTargetGuild}
 */
proto.SimpleDictionaryUpdateTarget.prototype.getAfter = function() {
  return /** @type{proto.SimpleDictionaryUpdateTargetGuild} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTargetGuild, 2));
};


/** @param {proto.SimpleDictionaryUpdateTargetGuild|undefined} value  */
proto.SimpleDictionaryUpdateTarget.prototype.setAfter = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SimpleDictionaryUpdateTarget.oneofGroups_[0], value);
};


proto.SimpleDictionaryUpdateTarget.prototype.clearAfter = function() {
  this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SimpleDictionaryUpdateTarget.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SimpleDictionaryUpdateTargetSharedDictionary shared = 3;
 * @return {proto.SimpleDictionaryUpdateTargetSharedDictionary}
 */
proto.SimpleDictionaryUpdateTarget.prototype.getShared = function() {
  return /** @type{proto.SimpleDictionaryUpdateTargetSharedDictionary} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTargetSharedDictionary, 3));
};


/** @param {proto.SimpleDictionaryUpdateTargetSharedDictionary|undefined} value  */
proto.SimpleDictionaryUpdateTarget.prototype.setShared = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SimpleDictionaryUpdateTarget.oneofGroups_[0], value);
};


proto.SimpleDictionaryUpdateTarget.prototype.clearShared = function() {
  this.setShared(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SimpleDictionaryUpdateTarget.prototype.hasShared = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateSimpleDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateSimpleDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateSimpleDictionary.displayName = 'proto.UpdateSimpleDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateSimpleDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateSimpleDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateSimpleDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateSimpleDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.SimpleDictionaryUpdateTarget.toObject(includeInstance, f),
    value: (f = msg.getValue()) && config_pb.DictionaryEntryB.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateSimpleDictionary}
 */
proto.UpdateSimpleDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateSimpleDictionary;
  return proto.UpdateSimpleDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateSimpleDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateSimpleDictionary}
 */
proto.UpdateSimpleDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimpleDictionaryUpdateTarget;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new config_pb.DictionaryEntryB;
      reader.readMessage(value,config_pb.DictionaryEntryB.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateSimpleDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateSimpleDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateSimpleDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateSimpleDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SimpleDictionaryUpdateTarget.serializeBinaryToWriter
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      config_pb.DictionaryEntryB.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateSimpleDictionary} The clone.
 */
proto.UpdateSimpleDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateSimpleDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SimpleDictionaryUpdateTarget target = 1;
 * @return {proto.SimpleDictionaryUpdateTarget}
 */
proto.UpdateSimpleDictionary.prototype.getTarget = function() {
  return /** @type{proto.SimpleDictionaryUpdateTarget} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTarget, 1));
};


/** @param {proto.SimpleDictionaryUpdateTarget|undefined} value  */
proto.UpdateSimpleDictionary.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UpdateSimpleDictionary.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateSimpleDictionary.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional config.DictionaryEntryB value = 2;
 * @return {proto.config.DictionaryEntryB}
 */
proto.UpdateSimpleDictionary.prototype.getValue = function() {
  return /** @type{proto.config.DictionaryEntryB} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryB, 2));
};


/** @param {proto.config.DictionaryEntryB|undefined} value  */
proto.UpdateSimpleDictionary.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UpdateSimpleDictionary.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateSimpleDictionary.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InsertSimpleDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InsertSimpleDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InsertSimpleDictionary.displayName = 'proto.InsertSimpleDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InsertSimpleDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.InsertSimpleDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InsertSimpleDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.InsertSimpleDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.SimpleDictionaryUpdateTarget.toObject(includeInstance, f),
    value: (f = msg.getValue()) && config_pb.DictionaryEntryB.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InsertSimpleDictionary}
 */
proto.InsertSimpleDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InsertSimpleDictionary;
  return proto.InsertSimpleDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InsertSimpleDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InsertSimpleDictionary}
 */
proto.InsertSimpleDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimpleDictionaryUpdateTarget;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new config_pb.DictionaryEntryB;
      reader.readMessage(value,config_pb.DictionaryEntryB.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.InsertSimpleDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.InsertSimpleDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InsertSimpleDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.InsertSimpleDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SimpleDictionaryUpdateTarget.serializeBinaryToWriter
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      config_pb.DictionaryEntryB.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.InsertSimpleDictionary} The clone.
 */
proto.InsertSimpleDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.InsertSimpleDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SimpleDictionaryUpdateTarget target = 1;
 * @return {proto.SimpleDictionaryUpdateTarget}
 */
proto.InsertSimpleDictionary.prototype.getTarget = function() {
  return /** @type{proto.SimpleDictionaryUpdateTarget} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTarget, 1));
};


/** @param {proto.SimpleDictionaryUpdateTarget|undefined} value  */
proto.InsertSimpleDictionary.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.InsertSimpleDictionary.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.InsertSimpleDictionary.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional config.DictionaryEntryB value = 2;
 * @return {proto.config.DictionaryEntryB}
 */
proto.InsertSimpleDictionary.prototype.getValue = function() {
  return /** @type{proto.config.DictionaryEntryB} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryB, 2));
};


/** @param {proto.config.DictionaryEntryB|undefined} value  */
proto.InsertSimpleDictionary.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.InsertSimpleDictionary.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.InsertSimpleDictionary.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddSimpleDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddSimpleDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddSimpleDictionary.displayName = 'proto.AddSimpleDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddSimpleDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.AddSimpleDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddSimpleDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AddSimpleDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.SimpleDictionaryUpdateTarget.toObject(includeInstance, f),
    from: msg.getFrom(),
    to: msg.getTo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddSimpleDictionary}
 */
proto.AddSimpleDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddSimpleDictionary;
  return proto.AddSimpleDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddSimpleDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddSimpleDictionary}
 */
proto.AddSimpleDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimpleDictionaryUpdateTarget;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.AddSimpleDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AddSimpleDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddSimpleDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.AddSimpleDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SimpleDictionaryUpdateTarget.serializeBinaryToWriter
    );
  }
  f = this.getFrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.AddSimpleDictionary} The clone.
 */
proto.AddSimpleDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.AddSimpleDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SimpleDictionaryUpdateTarget target = 1;
 * @return {proto.SimpleDictionaryUpdateTarget}
 */
proto.AddSimpleDictionary.prototype.getTarget = function() {
  return /** @type{proto.SimpleDictionaryUpdateTarget} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTarget, 1));
};


/** @param {proto.SimpleDictionaryUpdateTarget|undefined} value  */
proto.AddSimpleDictionary.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AddSimpleDictionary.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.AddSimpleDictionary.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string from = 2;
 * @return {string}
 */
proto.AddSimpleDictionary.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.AddSimpleDictionary.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string to = 3;
 * @return {string}
 */
proto.AddSimpleDictionary.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.AddSimpleDictionary.prototype.setTo = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveSimpleDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveSimpleDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveSimpleDictionary.displayName = 'proto.RemoveSimpleDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveSimpleDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveSimpleDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveSimpleDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemoveSimpleDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.SimpleDictionaryUpdateTarget.toObject(includeInstance, f),
    index: msg.getIndex()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveSimpleDictionary}
 */
proto.RemoveSimpleDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveSimpleDictionary;
  return proto.RemoveSimpleDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveSimpleDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveSimpleDictionary}
 */
proto.RemoveSimpleDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimpleDictionaryUpdateTarget;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RemoveSimpleDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveSimpleDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveSimpleDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveSimpleDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SimpleDictionaryUpdateTarget.serializeBinaryToWriter
    );
  }
  f = this.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.RemoveSimpleDictionary} The clone.
 */
proto.RemoveSimpleDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.RemoveSimpleDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SimpleDictionaryUpdateTarget target = 1;
 * @return {proto.SimpleDictionaryUpdateTarget}
 */
proto.RemoveSimpleDictionary.prototype.getTarget = function() {
  return /** @type{proto.SimpleDictionaryUpdateTarget} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTarget, 1));
};


/** @param {proto.SimpleDictionaryUpdateTarget|undefined} value  */
proto.RemoveSimpleDictionary.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RemoveSimpleDictionary.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.RemoveSimpleDictionary.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.RemoveSimpleDictionary.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.RemoveSimpleDictionary.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultDictionaryEntryBOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultDictionaryEntryBOk.oneofGroups_);
};
goog.inherits(proto.UpdateResultDictionaryEntryBOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultDictionaryEntryBOk.displayName = 'proto.UpdateResultDictionaryEntryBOk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultDictionaryEntryBOk.oneofGroups_ = [[1],[2]];

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryBOk.BeforeOptionalCase = {
  BEFORE_OPTIONAL_NOT_SET: 0,
  BEFORE: 1
};

/**
 * @return {proto.UpdateResultDictionaryEntryBOk.BeforeOptionalCase}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.getBeforeOptionalCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryBOk.BeforeOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryBOk.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryBOk.AfterOptionalCase = {
  AFTER_OPTIONAL_NOT_SET: 0,
  AFTER: 2
};

/**
 * @return {proto.UpdateResultDictionaryEntryBOk.AfterOptionalCase}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.getAfterOptionalCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryBOk.AfterOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryBOk.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultDictionaryEntryBOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultDictionaryEntryBOk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryBOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: (f = msg.getBefore()) && config_pb.DictionaryEntryB.toObject(includeInstance, f),
    after: (f = msg.getAfter()) && config_pb.DictionaryEntryB.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultDictionaryEntryBOk}
 */
proto.UpdateResultDictionaryEntryBOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultDictionaryEntryBOk;
  return proto.UpdateResultDictionaryEntryBOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultDictionaryEntryBOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultDictionaryEntryBOk}
 */
proto.UpdateResultDictionaryEntryBOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new config_pb.DictionaryEntryB;
      reader.readMessage(value,config_pb.DictionaryEntryB.deserializeBinaryFromReader);
      msg.setBefore(value);
      break;
    case 2:
      var value = new config_pb.DictionaryEntryB;
      reader.readMessage(value,config_pb.DictionaryEntryB.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultDictionaryEntryBOk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryBOk.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryBOk.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBefore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      config_pb.DictionaryEntryB.serializeBinaryToWriter
    );
  }
  f = this.getAfter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      config_pb.DictionaryEntryB.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultDictionaryEntryBOk} The clone.
 */
proto.UpdateResultDictionaryEntryBOk.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultDictionaryEntryBOk} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional config.DictionaryEntryB before = 1;
 * @return {proto.config.DictionaryEntryB}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.getBefore = function() {
  return /** @type{proto.config.DictionaryEntryB} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryB, 1));
};


/** @param {proto.config.DictionaryEntryB|undefined} value  */
proto.UpdateResultDictionaryEntryBOk.prototype.setBefore = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultDictionaryEntryBOk.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryBOk.prototype.clearBefore = function() {
  this.setBefore(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.hasBefore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional config.DictionaryEntryB after = 2;
 * @return {proto.config.DictionaryEntryB}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.getAfter = function() {
  return /** @type{proto.config.DictionaryEntryB} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryB, 2));
};


/** @param {proto.config.DictionaryEntryB|undefined} value  */
proto.UpdateResultDictionaryEntryBOk.prototype.setAfter = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultDictionaryEntryBOk.oneofGroups_[1], value);
};


proto.UpdateResultDictionaryEntryBOk.prototype.clearAfter = function() {
  this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryBOk.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultDictionaryEntryBSame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultDictionaryEntryBSame.oneofGroups_);
};
goog.inherits(proto.UpdateResultDictionaryEntryBSame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultDictionaryEntryBSame.displayName = 'proto.UpdateResultDictionaryEntryBSame';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultDictionaryEntryBSame.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryBSame.ValueOptionalCase = {
  VALUE_OPTIONAL_NOT_SET: 0,
  VALUE: 1
};

/**
 * @return {proto.UpdateResultDictionaryEntryBSame.ValueOptionalCase}
 */
proto.UpdateResultDictionaryEntryBSame.prototype.getValueOptionalCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryBSame.ValueOptionalCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryBSame.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryBSame.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultDictionaryEntryBSame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultDictionaryEntryBSame} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryBSame.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && config_pb.DictionaryEntryB.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultDictionaryEntryBSame}
 */
proto.UpdateResultDictionaryEntryBSame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultDictionaryEntryBSame;
  return proto.UpdateResultDictionaryEntryBSame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultDictionaryEntryBSame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultDictionaryEntryBSame}
 */
proto.UpdateResultDictionaryEntryBSame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new config_pb.DictionaryEntryB;
      reader.readMessage(value,config_pb.DictionaryEntryB.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultDictionaryEntryBSame} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryBSame.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultDictionaryEntryBSame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryBSame.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      config_pb.DictionaryEntryB.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultDictionaryEntryBSame} The clone.
 */
proto.UpdateResultDictionaryEntryBSame.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultDictionaryEntryBSame} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional config.DictionaryEntryB value = 1;
 * @return {proto.config.DictionaryEntryB}
 */
proto.UpdateResultDictionaryEntryBSame.prototype.getValue = function() {
  return /** @type{proto.config.DictionaryEntryB} */ (
    jspb.Message.getWrapperField(this, config_pb.DictionaryEntryB, 1));
};


/** @param {proto.config.DictionaryEntryB|undefined} value  */
proto.UpdateResultDictionaryEntryBSame.prototype.setValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultDictionaryEntryBSame.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryBSame.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryBSame.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateResultDictionaryEntryB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateResultDictionaryEntryB.oneofGroups_);
};
goog.inherits(proto.UpdateResultDictionaryEntryB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateResultDictionaryEntryB.displayName = 'proto.UpdateResultDictionaryEntryB';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateResultDictionaryEntryB.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.UpdateResultDictionaryEntryB.UpdateresultCase = {
  UPDATERESULT_NOT_SET: 0,
  RESULTOK: 1,
  RESULTSAME: 2,
  ERROR: 3
};

/**
 * @return {proto.UpdateResultDictionaryEntryB.UpdateresultCase}
 */
proto.UpdateResultDictionaryEntryB.prototype.getUpdateresultCase = function() {
  return /** @type {proto.UpdateResultDictionaryEntryB.UpdateresultCase} */(jspb.Message.computeOneofCase(this, proto.UpdateResultDictionaryEntryB.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryB.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateResultDictionaryEntryB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateResultDictionaryEntryB} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateResultDictionaryEntryB.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultok: (f = msg.getResultok()) && proto.UpdateResultDictionaryEntryBOk.toObject(includeInstance, f),
    resultsame: (f = msg.getResultsame()) && proto.UpdateResultDictionaryEntryBSame.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.UpdateResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateResultDictionaryEntryB}
 */
proto.UpdateResultDictionaryEntryB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateResultDictionaryEntryB;
  return proto.UpdateResultDictionaryEntryB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateResultDictionaryEntryB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateResultDictionaryEntryB}
 */
proto.UpdateResultDictionaryEntryB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UpdateResultDictionaryEntryBOk;
      reader.readMessage(value,proto.UpdateResultDictionaryEntryBOk.deserializeBinaryFromReader);
      msg.setResultok(value);
      break;
    case 2:
      var value = new proto.UpdateResultDictionaryEntryBSame;
      reader.readMessage(value,proto.UpdateResultDictionaryEntryBSame.deserializeBinaryFromReader);
      msg.setResultsame(value);
      break;
    case 3:
      var value = new proto.UpdateResultError;
      reader.readMessage(value,proto.UpdateResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.UpdateResultDictionaryEntryB} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryB.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateResultDictionaryEntryB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateResultDictionaryEntryB.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UpdateResultDictionaryEntryBOk.serializeBinaryToWriter
    );
  }
  f = this.getResultsame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateResultDictionaryEntryBSame.serializeBinaryToWriter
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UpdateResultError.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.UpdateResultDictionaryEntryB} The clone.
 */
proto.UpdateResultDictionaryEntryB.prototype.cloneMessage = function() {
  return /** @type {!proto.UpdateResultDictionaryEntryB} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional UpdateResultDictionaryEntryBOk resultOk = 1;
 * @return {proto.UpdateResultDictionaryEntryBOk}
 */
proto.UpdateResultDictionaryEntryB.prototype.getResultok = function() {
  return /** @type{proto.UpdateResultDictionaryEntryBOk} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultDictionaryEntryBOk, 1));
};


/** @param {proto.UpdateResultDictionaryEntryBOk|undefined} value  */
proto.UpdateResultDictionaryEntryB.prototype.setResultok = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UpdateResultDictionaryEntryB.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryB.prototype.clearResultok = function() {
  this.setResultok(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryB.prototype.hasResultok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateResultDictionaryEntryBSame resultSame = 2;
 * @return {proto.UpdateResultDictionaryEntryBSame}
 */
proto.UpdateResultDictionaryEntryB.prototype.getResultsame = function() {
  return /** @type{proto.UpdateResultDictionaryEntryBSame} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultDictionaryEntryBSame, 2));
};


/** @param {proto.UpdateResultDictionaryEntryBSame|undefined} value  */
proto.UpdateResultDictionaryEntryB.prototype.setResultsame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UpdateResultDictionaryEntryB.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryB.prototype.clearResultsame = function() {
  this.setResultsame(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryB.prototype.hasResultsame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateResultError error = 3;
 * @return {proto.UpdateResultError}
 */
proto.UpdateResultDictionaryEntryB.prototype.getError = function() {
  return /** @type{proto.UpdateResultError} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultError, 3));
};


/** @param {proto.UpdateResultError|undefined} value  */
proto.UpdateResultDictionaryEntryB.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.UpdateResultDictionaryEntryB.oneofGroups_[0], value);
};


proto.UpdateResultDictionaryEntryB.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.UpdateResultDictionaryEntryB.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MoveSimpleDictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MoveSimpleDictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MoveSimpleDictionary.displayName = 'proto.MoveSimpleDictionary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MoveSimpleDictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.MoveSimpleDictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MoveSimpleDictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MoveSimpleDictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.SimpleDictionaryUpdateTarget.toObject(includeInstance, f),
    from: msg.getFrom(),
    to: msg.getTo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MoveSimpleDictionary}
 */
proto.MoveSimpleDictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MoveSimpleDictionary;
  return proto.MoveSimpleDictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MoveSimpleDictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MoveSimpleDictionary}
 */
proto.MoveSimpleDictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimpleDictionaryUpdateTarget;
      reader.readMessage(value,proto.SimpleDictionaryUpdateTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.MoveSimpleDictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MoveSimpleDictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MoveSimpleDictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.MoveSimpleDictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SimpleDictionaryUpdateTarget.serializeBinaryToWriter
    );
  }
  f = this.getFrom();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTo();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.MoveSimpleDictionary} The clone.
 */
proto.MoveSimpleDictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.MoveSimpleDictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SimpleDictionaryUpdateTarget target = 1;
 * @return {proto.SimpleDictionaryUpdateTarget}
 */
proto.MoveSimpleDictionary.prototype.getTarget = function() {
  return /** @type{proto.SimpleDictionaryUpdateTarget} */ (
    jspb.Message.getWrapperField(this, proto.SimpleDictionaryUpdateTarget, 1));
};


/** @param {proto.SimpleDictionaryUpdateTarget|undefined} value  */
proto.MoveSimpleDictionary.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MoveSimpleDictionary.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.MoveSimpleDictionary.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 from = 2;
 * @return {number}
 */
proto.MoveSimpleDictionary.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.MoveSimpleDictionary.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 to = 3;
 * @return {number}
 */
proto.MoveSimpleDictionary.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.MoveSimpleDictionary.prototype.setTo = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MoveSimpleDictionaryResultOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MoveSimpleDictionaryResultOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MoveSimpleDictionaryResultOk.displayName = 'proto.MoveSimpleDictionaryResultOk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MoveSimpleDictionaryResultOk.prototype.toObject = function(opt_includeInstance) {
  return proto.MoveSimpleDictionaryResultOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MoveSimpleDictionaryResultOk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MoveSimpleDictionaryResultOk.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MoveSimpleDictionaryResultOk}
 */
proto.MoveSimpleDictionaryResultOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MoveSimpleDictionaryResultOk;
  return proto.MoveSimpleDictionaryResultOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MoveSimpleDictionaryResultOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MoveSimpleDictionaryResultOk}
 */
proto.MoveSimpleDictionaryResultOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.MoveSimpleDictionaryResultOk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MoveSimpleDictionaryResultOk.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MoveSimpleDictionaryResultOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.MoveSimpleDictionaryResultOk.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.MoveSimpleDictionaryResultOk} The clone.
 */
proto.MoveSimpleDictionaryResultOk.prototype.cloneMessage = function() {
  return /** @type {!proto.MoveSimpleDictionaryResultOk} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MoveSimpleDictionaryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.MoveSimpleDictionaryResult.oneofGroups_);
};
goog.inherits(proto.MoveSimpleDictionaryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MoveSimpleDictionaryResult.displayName = 'proto.MoveSimpleDictionaryResult';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.MoveSimpleDictionaryResult.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.MoveSimpleDictionaryResult.ResultCase = {
  RESULT_NOT_SET: 0,
  RESULTOK: 1,
  ERROR: 2
};

/**
 * @return {proto.MoveSimpleDictionaryResult.ResultCase}
 */
proto.MoveSimpleDictionaryResult.prototype.getResultCase = function() {
  return /** @type {proto.MoveSimpleDictionaryResult.ResultCase} */(jspb.Message.computeOneofCase(this, proto.MoveSimpleDictionaryResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MoveSimpleDictionaryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.MoveSimpleDictionaryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MoveSimpleDictionaryResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MoveSimpleDictionaryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultok: (f = msg.getResultok()) && proto.MoveSimpleDictionaryResultOk.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.UpdateResultError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MoveSimpleDictionaryResult}
 */
proto.MoveSimpleDictionaryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MoveSimpleDictionaryResult;
  return proto.MoveSimpleDictionaryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MoveSimpleDictionaryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MoveSimpleDictionaryResult}
 */
proto.MoveSimpleDictionaryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MoveSimpleDictionaryResultOk;
      reader.readMessage(value,proto.MoveSimpleDictionaryResultOk.deserializeBinaryFromReader);
      msg.setResultok(value);
      break;
    case 2:
      var value = new proto.UpdateResultError;
      reader.readMessage(value,proto.UpdateResultError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.MoveSimpleDictionaryResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MoveSimpleDictionaryResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MoveSimpleDictionaryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.MoveSimpleDictionaryResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MoveSimpleDictionaryResultOk.serializeBinaryToWriter
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateResultError.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.MoveSimpleDictionaryResult} The clone.
 */
proto.MoveSimpleDictionaryResult.prototype.cloneMessage = function() {
  return /** @type {!proto.MoveSimpleDictionaryResult} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MoveSimpleDictionaryResultOk resultOk = 1;
 * @return {proto.MoveSimpleDictionaryResultOk}
 */
proto.MoveSimpleDictionaryResult.prototype.getResultok = function() {
  return /** @type{proto.MoveSimpleDictionaryResultOk} */ (
    jspb.Message.getWrapperField(this, proto.MoveSimpleDictionaryResultOk, 1));
};


/** @param {proto.MoveSimpleDictionaryResultOk|undefined} value  */
proto.MoveSimpleDictionaryResult.prototype.setResultok = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.MoveSimpleDictionaryResult.oneofGroups_[0], value);
};


proto.MoveSimpleDictionaryResult.prototype.clearResultok = function() {
  this.setResultok(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.MoveSimpleDictionaryResult.prototype.hasResultok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateResultError error = 2;
 * @return {proto.UpdateResultError}
 */
proto.MoveSimpleDictionaryResult.prototype.getError = function() {
  return /** @type{proto.UpdateResultError} */ (
    jspb.Message.getWrapperField(this, proto.UpdateResultError, 2));
};


/** @param {proto.UpdateResultError|undefined} value  */
proto.MoveSimpleDictionaryResult.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.MoveSimpleDictionaryResult.oneofGroups_[0], value);
};


proto.MoveSimpleDictionaryResult.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.MoveSimpleDictionaryResult.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
